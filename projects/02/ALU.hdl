// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // calculates altered x-value depending on selectors zx and nx
    DMux4Way16(in=x, sel[0]=zx, sel[1]=nx, a=xnorm, b=zerox, c=negatex, d=negatezerox);
    And16(a=zerox, b[0..15]=false, out=zeroedx);
    Not16(in=negatex, out=notx);
    And16(a=negatezerox, b[0..15]=false, out=negatingzerox);
    Not16(in=negatingzerox, out=onesx);
    Mux4Way16(a=xnorm, b=zeroedx, c=notx, d=onesx, sel[0]=zx, sel[1]=nx, out=xval);

    // calculates altered y-value depending on selectors zy and ny
    DMux4Way16(in=y, sel[0]=zy, sel[1]=ny, a=ynorm, b=zeroy, c=negatey, d=negatezeroy);
    And16(a=zeroy, b[0..15]=false, out=zeroedy);
    Not16(in=negatey, out=noty);
    And16(a=negatezeroy, b[0..15]=false, out=negatingzeroy);
    Not16(in=negatingzeroy, out=onesy);
    Mux4Way16(a=ynorm, b=zeroedy, c=noty, d=onesy, sel[0]=zy, sel[1]=ny, out=yval);

    // x+y and x&y
    Add16(a=xval, b=yval, out=added);
    And16(a=xval, b=yval, out=anded);

    // applies the f-selector do choose between x+y and x&y
    Mux16(a=anded, b=added, sel=f, out=comp);

    // negates the output depending on no-selector
    DMux16(in=comp, sel=no, a=out1, b=negateout);
    Not16(in=negateout, out=out2);
    Mux16(a=out1, b=out2, sel=no, out=output);

    // feeds the output to the out pin
    Not16(in=output, out=notoutput);
    Not16(in=notoutput, out=out);

    // calculates whether the output is negative
    And16(a=output, b[0..15]=true, out[0..14]=nothing, out[15]=ng);

    // calculates whether the output is zero
    Or16Way(in=notoutput, out=ors);
    Not(in=ors, out=zr);
}
